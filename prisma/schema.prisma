// prisma/mongo-schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  BOT
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  lname                 String?
  username              String                 @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Pronouns              String?
  URL                   String?
  bio                   String?
  dateOfBirth           String? // ISO 8601 date as a string
  gender                String?
  phone                 String?
  country               String?
  facebook              String? // Assuming URL for Facebook profile
  twitter               String? // Assuming URL for Twitter profile
  instagram             String? // Assuming URL for Instagram profile
  linkedin              String? // Assuming URL for LinkedIn profile
  Company               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// repositors

model Repository {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  author           String
  authorId         String
  name             String
  description      String?
  link             String?
  lastCommit       String?
  issuercount      Int                @default(0)
  PRcouunt         Int                @default(0)
  Visibility       Visibility         @default(public)
  isFork           Boolean            @default(false)
  isArchived       Boolean            @default(false)
  isTemplate       Boolean            @default(false)
  stars            Int                @default(0)
  watchers         Int                @default(0)
  forksCount       Int                @default(0)
  branches         Branch[]
  DefualtBranch    String             @default("main")
  commits          Commit[]
  forks            Forks[]
  tags             String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  IssuePullRequest IssuePullRequest[]
}

enum Visibility {
  public
  private
}

model Commit {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  commitId     String
  author       String
  title        String
  description  String?
  branch       String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  files        Json[]
  repositoryId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Forks {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  repositoryId String     @db.ObjectId
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Branch {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  repositoryId String?     @db.ObjectId
  Repository   Repository? @relation(fields: [repositoryId], references: [id])
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model IssuePullRequest {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  isOpen       Boolean    @default(true)
  isIssue      Boolean    @default(false)
  isPr         Boolean    @default(false)
  author       String
  archived     Boolean    @default(false)
  number       Int
  title        String
  body         String?
  comment      Comment[]
  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Comment {
  id                           String           @id @default(auto()) @map("_id") @db.ObjectId
  body                         String
  author                       String
  number                       Int              @unique @default(0)
  IssuePullRequest             IssuePullRequest @relation(fields: [issuePullRequestDiscussionId], references: [id])
  issuePullRequestDiscussionId String           @db.ObjectId
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
}
